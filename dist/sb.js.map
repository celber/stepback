{"version":3,"sources":["Core.js","Debug.js","Observable.js","StateManaged.js","Model.js","Store.js","ComponentManager.js","Component.js","Container.js","Worker.js","Element.js","Query.js","Fit.js","VSplit.js","Button.js","Arrow.js","Item.js","Avatar.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACljtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjtxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sb.js","sourcesContent":["// @ts-check\n'use strict';\n\n/**\n * @classdesc Svarog global object\n * @global\n * @static\n * @class\n */\nvar Sb = {}; // eslint-disable-line\n\n/**\n * Global config for plugins\n * @constant\n */\nSb.config = {\n\tfx: {\n\t\tanimations: true,\n\t\tduration: 1,\n\t},\n\tmap: {\n\t\tapiKey: null,\n\t},\n};\n\n/**\n * Create namespace for a class\n * @param {String} namespace dot-separated namespace\n * @example\n *  Sb.namespace('Sb.Foo.Bar')\n */\nSb.namespace = function (namespace) {\n\tvar ns = namespace.split('.'),\n\t\tbranch = this,\n\t\ti;\n\n\tfor (i = 0; i < ns.length; ++i) {\n\t\tif (!branch[ns[i]]) {\n\t\t\tbranch[ns[i]] = {};\n\t\t}\n\n\t\tbranch = branch[ns[i]];\n\t}\n\n\treturn branch;\n};\n\n/**\n * clones an object\n * @param {Object} source\n * @returns {Object} cloned object\n */\nSb.clone = function (source) {\n\tvar target = Object();\n\n\tfor (var nextKey in source) {\n\t\t// Avoid bugs when hasOwnProperty is shadowed\n\t\tif (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n\t\t\ttarget[nextKey] = source[nextKey];\n\t\t}\n\t}\n\n\treturn target;\n};\n\n/**\n * Extends an object with given source *recursively*\n * Also merges arrays and nested objects\n * @param {Object} target\n * @param {Object} source\n *\n * @returns null\n */\nSb.merge = function (target, source) {\n\tfor (var key in source) {\n\t\tif (source[key] instanceof Array) {\n\t\t\ttarget[key] === undefined && (target[key] = []);\n\t\t\ttarget[key] = target[key].concat(source[key]);\n\t\t} else if (typeof source[key] == 'object' && typeof target[key] == 'object' && target[key] !== null) {\n\t\t\ttarget[key] === undefined && (target[key] = {});\n\t\t\tthis.merge(target[key], source[key]);\n\t\t} else {\n\t\t\ttarget[key] = source[key];\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Extends an object with given source *recursively*\n * Also merges arrays and nested objects\n * @param {Object} target\n * @param {Object} source\n *\n * @returns null\n */\nSb.extend = function (target, source) {\n\tif (!target.prototype) target.prototype = {};\n\n\tObject.setPrototypeOf(target.prototype, source.prototype);\n};\n\n/**\n * Extends an object with given source *recursively*\n * Also merges arrays and nested objects\n * @param {Object} target\n * @param {Object} source\n *\n * @returns null\n */\nSb.mixin = function (target, source) {\n\tSb.merge(target.prototype, source.prototype);\n};\n\n/**\n * Format template string.\n * @param {String} string Template string\n * @param {Object|Map} data Key => value mapped data for template\n *\n * @example\n * Sb.formatString(\"a {b}\", {b: 2})\n *\n * @returns {String} compiled string\n */\nSb.formatString = function (string, data) {\n\tfor (var key in data) {\n\t\tstring = string.replace('{' + key + '}', data[key]);\n\t}\n\n\treturn string;\n};\n","//removeIf(!debug)\n'use strict';\n\nSb.namespace('debug');\n\n/**\n * @classdesc Debugging utilities\n * @class\n * @singleton\n */\nSb.debug = (new function () {\n  /**\n   * Current runtime statistics\n   */\n  this.stats = {\n    componentsCreated: 0,\n    /**\n     * @type Number | String\n     */\n    initTime: 'Not checked. Use <pre>Sb.debug.markEndOfInit();</pre> after app initial script',\n  };\n\n  this._startOfInit = performance.now();\n  /**\n   * Container wrapper for nested components\n   */\n  this.popups = true;\n\n  this.level = 0x15;\n  this.NONE = 0x0;\n  this.ERROR = 0x1;\n  this.WARN = 0x3;\n  this.INFO = 0x7;\n  this.DEBUG = 0x15;\n\n  return this;\n}());\n\n\n(function (/** @alias Sb.debug.prototype */ self) {\n  self.popup = function (level, msg) {};\n\n  self.warn = function (context, msg) {\n    console.warn(`ü§í ${msg}`);\n  };\n\n  self.error = function () {\n    throw 'üêÑ error handling is not part of Sb.debug module. Use Sb.error instead';\n  };\n\n  self.markEndOfInit = function () {\n    Sb.debug.stats.initTime = performance.now() - Sb.debug._startOfInit;\n  };\n\n  self.info = function (context, msg) {\n    console.info(`${msg}`);\n  };\n\n  self.log = function (context, msg) {\n    console.log(`${msg}`);\n  };\n}(Sb.debug.constructor.prototype));\n\nSb.debug.log(null, 'Debug tools are ready');\n\n//endRemoveIf(!debug)\n","Sb.namespace('mixin');\n\n/**\n * @classdesc Adds event handling\n * @class\n */\nSb.mixin.Observable = function () {\n  /**\n   * @private\n   */\n  this.listeners = {};\n};\n\n(function (/** @alias Sb.mixin.Observable.prototype */ self) {\n  /**\n   * Attach event callback\n   * @param {String} eventName\n   * @param {Function} callback\n   * @param {Object} [_options]\n   *\n   * @returns {Symbol} listener Id\n   */\n  self.on = function (eventName, callback, _options) {\n    var eventId = Symbol();\n\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.listeners[eventName].push({\n      eventId: eventId,\n      callback: callback,\n      options: _options || {},\n    });\n\n    return eventId;\n  };\n\n  /**\n   * Dettach event by its name+callback or symbol returned by .on\n   * @param {String|Symbol} eventName\n   * @param {Function} [_callback]\n   */\n  self.off = function (eventName, _callback) {};\n\n  /**\n   * Fire event\n   * @param {String} eventName\n   * @param {Object} [_values]\n   */\n  self.fire = function (eventName, _values) {\n    var i, event;\n\n    if (this.listeners[eventName]) {\n      for (i in this.listeners[eventName]) {\n        event = this.listeners[eventName][i];\n        event.callback(_values);\n      }\n    }\n  };\n})(Sb.mixin.Observable.prototype);\n","","","Sb.Store = function () {\n  \n}","'use strict';\n/**\n * Component Manager\n * @class\n * @static\n * @hideconstructor\n */\nSb.ComponentManager = function () {\n\n};\n\n(function(/** @alias Sb.ComponentManager.prototype */ self) {\n    self.registry = {};\n\n    /**\n     * Register new component type\n     * @param {String} type component ctype alias\n     * @param {Function} construct component constructor\n     */\n    self.register = function (type, construct) {\n        if (this.registry[type]) {\n            new Error('Component '+type+' already exists in Component Managers!');\n        }\n        this.registry[type] = construct;\n    };\n\n    /**\n     * Get constructor for given ctype\n     * @param {String} ctype Component class alias\n     * @returns {Function} Component constructor\n     */\n    self.get = function (ctype) {\n        if (!this.registry[ctype]) {\n            new Error('Component '+ctype+' does not exists in Component Managers!');\n        }\n        return this.registry[ctype];\n    };\n\n    /**\n     * Create component from config containing 'ctype'\n     * @param {Object} config\n     * @returns {Sb.Component} created component \n     */\n    self.create = function (config) {\n        var cls = self.get(config.componentType);\n        return new cls(config);\n    };\n}(Sb.ComponentManager.prototype));\n\nSb.ComponentManager = new Sb.ComponentManager();","'use strict';\n/**\n * @class\n * @classdesc Svarog base component\n * @param {Object} [_config={}]  Configuration object\n * @extends Sb.mixin.Observable\n */\n\nSb.Component = function (_config) {\n  var config = _config || {};\n\n  Sb.mixin.Observable.call(this);\n\n  if (!config.id) {\n    this.id = Sb.Component.getId();\n  }\n\n  /**\n   * Sb.Element instance\n   * @type {Sb.Element|HTMLElement}\n   */\n  this.el = null;\n\n  /**\n   * Set to true if component was already rendered\n   * @type {Boolean}s\n   */\n  this.rendered = false;\n\n  /**\n   * Parent container\n   * @type {Sb.Container}\n   */\n  this.parent = null;\n\n  /**\n   * Initial CSS class for component\n   * @type {String}\n   */\n  this.baseClass = 'sb-component';\n\n  /**\n   * Initial CSS classes (includes {@link Sb.Component#baseClass})\n   * @type {Array<String>}\n   */\n  this.classList = [this.baseClass];\n\n  /**\n   * Template used to render component\n   * @see {@link Sb.formatString}\n   * @type String\n   */\n  this.template = '<div></div>';\n\n  /**\n   * Key => value mapped object of values which are gonna be injected into template\n   * @type Object\n   */\n  this.templateData = {};\n\n  Sb.merge(this, config);\n\n  //removeIf(!debug)\n  Sb.debug.stats.componentsCreated++;\n  //endRemoveIf(!debug)\n};\n\n/**\n * First element ID, this is incremented automatically when component without ID is created.\n * @constant\n * @static\n */\nSb.Component.NEXT_ID = 1;\n\n/**\n * gets next element Id using {@link Sb.Component.NEXT_ID}\n */\nSb.Component.getId = function () {\n  return 'sb-' + Sb.Component.NEXT_ID++;\n};\n\n/**\n * Component was rendered.\n *\n * @event Sb.Component#render\n * @type {Sb.Component}\n */\n\n/**\n * Component was shown.\n *\n * @event Sb.Component#show\n * @type {Sb.Component}\n */\n\n/**\n * Component was hidden.\n *\n * @event Sb.Component#hide\n * @type {Sb.Component}\n */\n\n(function (/** @alias Sb.Component.prototype */ self) {\n  /**\n   * Renders component to given container\n   * @type Sb.Component\n   */\n  self.renderTo = function (target) {\n    this.beforeRender(target);\n    this.el = this.el || Sb.Element.render(Sb.formatString(this.template, this.templateData));\n    this.el.setAttribute('id', this.id);\n    if (this.classList.length) {\n      this.el.addClass.apply(this.el, this.classList);\n    }\n    this.parent = target;\n    target.append(this.el);\n    this.rendered = true;\n    this.afterRender(target);\n    this.fire('render', this);\n    return this;\n  };\n\n  /**\n   * Add CSS class to component\n   */\n  self.addClass = function (cls) {\n    this.el.addClass(cls);\n    this.classList.push(cls);\n  };\n\n  /**\n   * Removes CSS class from component\n   */\n  self.removeClass = function (cls) {\n    this.el.removeClass(cls);\n    this.classList = this.classList.filter(function (value) {\n      return value !== cls;\n    });\n  };\n\n  /**\n   * fired before component is rendered\n   * @virtual\n   */\n  // eslint-disable-next-line no-unused-vars\n  self.beforeRender = function (target) {};\n  /**\n   * fired after component is rendered\n   * @virtual\n   */\n  // eslint-disable-next-line no-unused-vars\n  self.afterRender = function (target) {};\n})(Sb.Component.prototype);\n\nSb.mixin(Sb.Component, Sb.mixin.Observable);\n\nSb.ComponentManager.register('component', Sb.Component);\n","'use strict';\n/**\n * @classdesc Container component which has layout and nested components\n * @class\n * @extends Sb.Component\n */\nSb.Container = function (config) {\n  Sb.Component.call(this, config);\n\n  this.baseClass = 'sb-container';\n\n  this.classList.push(this.baseClass);\n\n  /**\n   * Layout instance\n   */\n  this.layout = null;\n\n  /**\n   * Container wrapper for nested components\n   * @private\n   */\n  this.containerEl = this.containerEl || null;\n\n  /**\n   * Nested components and containers\n   * @type Array<Sb.Component|Sb.Container>\n   */\n  this.items = this.items || [];\n\n  for (var i in this.items) {\n    this.items[i] = this.createItem(this.items[i]);\n  }\n};\n\n(function (/** @alias Sb.Container.prototype */ self) {\n  /**\n   * Adds item to container\n   * @param {Sb.Component} item\n   */\n  self.addItem = function (item) {\n    this.items.push(this.createItem(item));\n    this.renderTo(this.parent);\n  };\n\n  /**\n   * Returns container wrapper element\n   * @returns {HTMLElement} wrapper element\n   */\n  self.getContainerEl = function () {\n    return this.el;\n  };\n\n  /**\n   * Creates item instance\n   * @private\n   */\n  self.createItem = function (itemConfig) {\n    return Sb.ComponentManager.create(itemConfig);\n  };\n\n  /**\n   * Renders itself and all children to given target\n   * @override\n   * @param {Sb.Container|HTMLElement} target\n   */\n  self.renderTo = function (target) {\n    var suspendItemRender = false;\n    Sb.Component.prototype.renderTo.call(this, target);\n\n    this.containerEl = this.getContainerEl();\n    for (var i = 0; i < this.items.length; ++i) {\n      suspendItemRender = !!this.beforeItemRender(this.items[i], i, this.containerEl);\n      suspendItemRender || this.renderItem(this.items[i], this.containerEl);\n      suspendItemRender || this.afterItemRender(this.items[i], i, this.containerEl);\n    }\n  };\n\n  /**\n   * Renders item instance\n   * @private\n   */\n  self.renderItem = function (item, containerEl) {\n    item.rendered || item.renderTo(containerEl);\n    return item;\n  };\n\n  /**\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  self.beforeItemRender = function (item, itemIdx, containerEl) {};\n\n  /**\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  self.afterItemRender = function (item, itemIdx, containerEl) {};\n})(Sb.Container.prototype);\nSb.extend(Sb.Container, Sb.Component);\n\nSb.ComponentManager.register('container', Sb.Container);\n","'use strict';\n/**\n * @classdesc Web Worker which supports inline functions and script files\n * @class\n * @param {Function|String} body Worker function or script location\n * @extends Sb.mixin.Observable\n */\nSb.Worker = function (body) {\n    var blobURL;\n\n    if (typeof body == \"function\") {\n      blobURL = URL.createObjectURL( new Blob(\n        [ '(', body.toString(),')()' ],\n        { type: 'application/javascript' } )\n      );\n\n      this.worker = new Worker( blobURL );\n\n      // delete blobUrl from memory\n      URL.revokeObjectURL( blobURL );\n    } else {\n      this.worker = new Worker( body );\n    }\n\n    Sb.mixin.Observable.call(this);\n\n    this.worker.onmessage = this._onMessage.bind(this);\n};\n\n\n/**\n * Message received from worker.\n *\n * @event Sb.Worker#message\n * @type {*}\n */\n\n(function (/** @alias Sb.Worker.prototype */ self) {\n\n    /**\n     * Sends message to worker thread\n     * @param {*} message Payload for a worker\n     */\n    self.post = function (message) {\n      this.worker.postMessage(message);\n    };\n\n    /**\n     * Terminates worker thread\n     */\n    self.terminate = function () {\n        return this.worker.terminate();\n    };\n\n    /**\n     * Internal event handler\n     * @private\n     * @fires message\n     */\n    self._onMessage = function (msg) {\n      return this.fire('message', msg);\n  };\n\n}(Sb.Worker.prototype));\n\nSb.mixin(Sb.Worker, Sb.mixin.Observable);","'use strict';\n/**\n * @classdesc Wrapper for native {@link HTMLElement}\n * @class\n * @param {HTMLElement} el HTML Element\n * @param {Object} [config={}] Configuration object\n */\nSb.Element = function (el, config) {\n\tthis.nativeElement = el;\n\tSb.merge(this.config, config);\n};\n\n/**\n * Renders HTMLElement from given template\n * @static\n * @param {String} template\n * @returns {Sb.Element}\n */\nSb.Element.render = function (template) {\n\tvar element;\n\tvar tempEl = document.createElement('template');\n\tvar html = template.trim(); // Never return a text node of whitespace as the result\n\ttempEl.innerHTML = html;\n\n\telement = new Sb.Element(document.adoptNode(tempEl.content.firstChild));\n\telement.template = template;\n\n\treturn element;\n};\n\n(function (/** @alias Sb.Element.prototype */ extend) {\n\t/**\n\t * Id of element\n\t */\n\textend.id = null;\n\t/**\n\t * Native element\n\t * @private\n\t */\n\textend.nativeElement = null;\n\t/**\n\t * Config\n\t * @private\n\t */\n\textend.config = {};\n\textend.listeners = {};\n\t/**\n\t * Template to render\n\t * @see {@link Sb.formatString}\n\t */\n\textend.template = null;\n\n\t/**\n\t * Check if element has CSS class\n\t * @param {String} cls CSS class\n\t */\n\textend.hasClass = function (cls) {\n\t\treturn Array.prototype.indexOf.call(this.nativeElement.classList, cls) !== -1;\n\t};\n\n\t/**\n\t * Add CSS class to element\n\t * @param {String} cls CSS class\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\textend.addClass = function (_cls) {\n\t\tthis.nativeElement.classList.add.apply(this.nativeElement.classList, arguments);\n\t};\n\n\t/**\n\t * Remove CSS class from element\n\t * @param {String} cls CSS class\n\t */\n\textend.removeClass = function (cls) {\n\t\tthis.nativeElement.classList.remove(cls);\n\t};\n\n\t/**\n\t * Toggles CSS class on element\n\t * @param {String} cls CSS class\n\t */\n\textend.toggleClass = function (cls) {\n\t\tthis[this.hasClass(cls) ? 'removeClass' : 'addClass'](cls);\n\t};\n\n\textend.on = function (event, handler) {\n\t\tthis.nativeElement.addEventListener(event, handler);\n\t};\n\n\textend.off = function (event, handler) {\n\t\tthis.nativeElement.removeEventListener(event, handler);\n\t};\n\n\t/**\n\t * Hides an element\n\t * @param {Boolean} [useVisibility=false] use 'visibility' property to hide\n\t */\n\textend.hide = function (useVisibility) {\n\t\tthis.addClass(useVisibility ? 'invisible' : 'hidden');\n\t};\n\n\t/**\n\t * Shows an element\n\t */\n\textend.show = function () {\n\t\tthis.removeClass('hidden');\n\t\tthis.removeClass('invisible');\n\t};\n\n\t/**\n\t * Toggles an element\n\t */\n\textend.toggle = function (useVisibility) {\n\t\tthis.toggleClass(useVisibility ? 'invisible' : 'hidden');\n\t};\n\n\textend.append = function (element) {\n\t\tthis.nativeElement.appendChild(element.nativeElement);\n\t};\n\n\textend.setAttribute = function (name, value) {\n\t\tthis.nativeElement.setAttribute(name, value);\n\t};\n})(Sb.Element.prototype);\n","/**\n * Queries one first element and wrapps it into {@link Sb.Element}\n * @static\n * @param {String} query CSS query string\n * @returns {Sb.Element}\n */\nSb.queryOne = function (query) {\n    return new Sb.Element(document.querySelector(query));\n};\n\n/**\n * Queries many elements and wrapps it into {@link Sb.Element}\n * @static\n * @param {String} query CSS query string\n * @returns {Array<Sb.Element>}\n */\nSb.queryAll = function (query) {\n    return Array.prototype.map.call(\n        document.querySelectorAll(query),\n        function (el) {\n            return new Sb.Element(el);\n    });\n};","Sb.namespace(\"layout\");\n/**\n * @classdesc Layout for one element, it stretches it to fit whole container\n * @class\n * @augments Sb.Container\n * @param {Object} [_config={}] config\n */\nSb.layout.Fit = function (_config) {\n  Sb.Container.call(this, _config);\n  \n  this.baseClass = 'sb-fit-layout';\n\n  this.classList = this.classList.push(this.baseClass);\n    \n  /**\n   * Default template\n   * @override\n   */\n  this.template = `<div></div>`;\n};\n\n(function (/** @alias Sb.layout.Fit.prototype */ extend) {\n    \n})(Sb.layout.Fit.prototype);\n\nSb.extend(Sb.layout.Fit, Sb.Container);\nSb.ComponentManager.register('fit', Sb.layout.Fit);","Sb.namespace(\"layout\");\n/**\n * @class\n * @classdesc Layout which splits components vertically\n * @extends Sb.Container\n */\nSb.layout.VSplit = function (_config) {\n    Sb.Container.call(this, _config);\n\n    this.baseClass = 'sb-vsplit-layout';\n\n    /**\n     * @override\n     */\n    this.classList = this.classList.push(this.baseClass);\n    \n    /**\n     * Default template\n     * @override\n     */\n    this.template = `<div></div>`;\n};\n\n(function (/** @alias Sb.layout.VSplit.prototype */ self) {\n\n    /**\n     * @override\n     */\n    self.renderTo = function (target) {\n        Sb.Container.prototype.renderTo.call(this, target);\n    };\n\n    /**\n     * Is fired when child component is rendered\n     */\n    self.afterItemRender = function (item, itemIdx, containerEl) {\n        \n        item.addClass(this.baseClass+'-child');\n\n        // append gutter\n        // ignore last element so gutter is not added at the end\n        if (itemIdx !==  ( this.items.length - 1 )) {\n            containerEl.append(this.createSplitBorder());\n        }\n    };\n\n    /**\n     * @override\n     */\n    self.afterRender = function (target) {};\n\n    /**\n     * Create split border element\n     * @returns {Sb.Element}\n     */\n    self.createSplitBorder = function () {\n        return Sb.Element.render('<div class=\"'+this.baseClass+'-gutter\">&nbsp;</div>');\n    }\n})(Sb.layout.VSplit.prototype);\nSb.extend(Sb.layout.VSplit, Sb.Container);\n\nSb.ComponentManager.register('vsplit', Sb.layout.VSplit);","Sb.namespace(\"zendesk\");\n\nSb.zendesk.Button = function (config) {\n    Sb.Component.call(this, config);\n\n    this.baseClass = 'sb-zen-button';\n\n    this.classList.push(this.baseClass);\n\n    this.text = config.text;\n    this.handler = function () {};\n    \n    this.template = `<div class=\"c-btn\">{text}</div>`;\n\n    if (config.primary) {\n        this.classList.push(\"c-btn--primary\");\n    }\n\n    if (config.handler) {\n        this.handler = config.handler;\n    }\n\n    this.templateData['text'] = this.text;\n};\n\n(function (self) {\n\n    self.setHandler = function (handler) {\n        var me = this;\n        me.el.off('click', me.handler);\n        me.handler = function () {\n            handler.apply(me);\n        };\n        me.el.on('click', me.handler);\n    };\n\n    self.afterRender = function (target) {\n        this.setHandler(this.handler);\n    };\n})(Sb.zendesk.Button.prototype);\nSb.extend(Sb.zendesk.Button, Sb.Component);\n\nSb.ComponentManager.register('zen:button', Sb.zendesk.Button);","Sb.namespace(\"zendesk\");\n\n/**\n * @classdesc Arrow component\n * @extends Sb.Container\n * @class\n * @param {String} [config.orientation] Arrow orientation\n */\nSb.zendesk.Arrow = function (config) {\n    Sb.Container.call(this, config);\n\n    this.templateData['orientation'] = config.orientation;\n};\n\n(function (/** @alias Sb.zendesk.Arrow.prototype */ self) {\n    self.baseClass = 'sb-zen-arrow';\n\n    /**\n     * @override\n     */\n    self.template = '<ul class=\"c-arrow c-menu c-arrow--{orientation}\"></ul>';\n})(Sb.zendesk.Arrow.prototype);\nSb.extend(Sb.zendesk.Arrow, Sb.Container);\n\nSb.ComponentManager.register('zen:arrow', Sb.zendesk.Arrow);","Sb.namespace(\"zendesk.menu\");\n\nSb.zendesk.menu.Item = function (config) {\n    Sb.zendesk.Button.call(this, config);\n    console.log('222')\n};\n\n(function (self) {\n    self.baseClass = 'sb-zen-menuitem';\n\n    self.template = '<div class=\"c-menu__item\">{text}</div>';\n})(Sb.zendesk.menu.Item.prototype);\nSb.extend(Sb.zendesk.menu.Item, Sb.zendesk.Button);\n\nSb.ComponentManager.register('zen:menuitem', Sb.zendesk.menu.Item);","Sb.namespace(\"zendesk\");\n\nSb.zendesk.Avatar = function (config) {\n    Sb.Container.call(this, config);\n\n    this.templateData['system'] = config.system ? 'c-avatar--system' : '' ;\n    this.templateData['size'] = config.size || 'md';\n    this.templateData['alt'] = config.alt || '';\n    this.templateData['src'] = config.src;\n};\n\n(function (self) {\n    self.baseClass = 'sb-zen-avatar';\n\n    self.template = `<figure class=\"c-avatar {system} c-avatar--size\">\n        <img alt='' src={src}>\n    </figure> `;\n})(Sb.zendesk.Avatar.prototype);\nSb.extend(Sb.zendesk.Avatar, Sb.Component);\n\nSb.ComponentManager.register('zen:avatar', Sb.zendesk.Avatar);"]}